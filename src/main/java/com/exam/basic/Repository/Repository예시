


//저장소를 위한 클래스
@Repository
//JpaRepository(사용할 저장소(테이블))<사용할 Entity, 기본키 데이터형>
public interface BoardRepository
        extends JpaRepository<BoardEntity, Long> {
    //사용자 질의어
    //@Query를 이용해서 데이터베이스 질의어를 작성하는 방법 2가지
    //1. entity의 변수명으로 질의어를 작성
    //@Query(Select 별칭 FROM 엔티티 별칭(1글자) WHERE 별칭.변수 조건식 :값)
    //2. 테이블의 필드명으로 질의어를 작성(네이티브 방식)
    //@Query(value = "select * from BoardEntity where title like %:search%", nativeQuery = true)

    // %내용 - 뒤에 내용이 일치하면, 내용% - 앞에서 일치하면, %내용% - 포함되면
    @Query("select u from BoardEntity u where u.title like %:search%")
    //서비스에서 search로 보낸 값을 search에 저장한다.
    Page<BoardEntity> SubjectSearch(@Param("search") String search, Pageable pageable);
    //search의 값이 title에 포함되어 있으면 검색 (위아래 같은 결과임)
    //Page<BoardEntity> findByTitleContaining(String search, Pageable pageable);

    @Query("select u from BoardEntity u where u.content like %:search%")
    Page<BoardEntity> ContentSearch(String search, Pageable pageable);
    //Page<BoardEntity>findByContentContaining(String search, Pageable pageable);

    @Query("select u from BoardEntity u where u.writer like %:search%")
    Page<BoardEntity> WriterSearch(String search, Pageable pageable);
    //Page<BoardEntity> findByWriterContaining(String search, Pageable pageable);

    //or ~중에 title에 있거나, content에 있거나, writer에 있으면 검색
    //and ~모두 title에 있고, content에도 있고, writer에 있으면 검색
    @Query("select u from BoardEntity u where u.title like %:search% or u.content like %:search% or u.writer like %:search%")
    Page<BoardEntity> AllSearch(String search, Pageable pageable);
    //Page<BoardEntity> findByTitleContainingOrContentContainingOrWriterContaining(String search, Pageable pageable);

}// 데이터 저장소